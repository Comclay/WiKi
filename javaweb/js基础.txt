JavaScript:

	页面的脚本语言，
	95年由网景(NetScape)公司开发一个LiveScript发展来的。
	微软与网景公司联合推出了一个JScript应用微软的IE3.0产品中
	SUN公司与网景公司联合推出了一个叫做JavaScript.
	
	现在使用JavaScript遵守ECMA-262标准
	
	JavaScript核心的组成：ECMA，BOM，DOM
	
ECMAScript：定义了变量，函数，关键字，保留字。
	与java的差异：
		相同部分：
			1，都区分大小写
		不同部分：
			1，弱变量类型(在定义变量的时候，变量的类型不知道，当赋值的时候才能够确定变量的类型)的语言，而java是一种强类型的语言;
			2，JavaScript中一条语句写完之后可以不写分号(但最好还是加上分号);
			
使用JS操作界面的效果：
	1，JS需要由事件触发
	2，
	
	JavaScript中定义字符串既可以用单引号也可以用双引号
	
javascript中的数据类型
	javascript中有五种原始数据类型
		Undefined,Null,Boolean,Array
		
		null和undefined的区别
			定义变量而没有初始化 undeifined 访问了一个不存在的属性
			
			对象不存在就null
		
		javascript数组可以包含不同的数据类型
			var arr = [];
			var arr = [11,22,333];
			var arr = [12,'djakl',true];
			var arr = new Array();
			var arr = new Array(5);   // 数组的长度是以最大下标+1;
			
JavaScript中的函数
	1,一般的函数
		function 方法名(参数列表){
			函数体;
		}
		
		function add(a,b){
			return a+b;
		}
		
	2,构造式的函数定义,或者动态函数
		var 函数名 = new Function('参数列表','函数体');
		
		var add = new Function('a,b','return a+b');
		
	3,直接量方式定义:
		var 函数名 = function(参数列表){
			函数体;
		}
	
		var add = function(a,b){
			return a+b;
		}
	
	特殊函数:
	4,如果一个函数可以作为参数传递,函数就可以称为回调函数
	
	function add(a,b){
		return a()+b();
	}
	
	var a = new Function(return 1);
	var b = new function (return 2);
	
	5,匿名函数:没有函数名的函数
	window.onload = function(){
		alert("页面加载");
	}
	
	6,匿名回调函数
		function add(a,b){
			return a()+b();
		}
		
		add(function(){return 1},function(){return 2});
		
	7,私有函数:类似于java中的内部类.
		function fn(){
			var a = "a";
			
			function n(){
				return a;
			}
		}
		
	8,返回函数的函数:
		function fn(){
			var a = "a";
			
			return function(){
				return a;
			}
		}
		
		alert(fn()());
		
	9,自调函数
		语法:()()
			第一个括号相当于函数的定义,
			第二个括号相当于函数的调用.
	(
		function(){
			alert("aaa");
		}
	)()
		
javascript中变量的作用范围
	作用域:全局域,函数域
	
		如果在函数域中定义一个变量没有加var则会将其当做一个全局变量
		
javascript中的内置对象


JS不是面向对象的 是基于对象的 ,JS中的函数就相当于对象

对象的定义:
	1,普通方式定义
	var obj = new Object();
	2,
	var obj2 = {};
	3, 函数形式
	function obj3(){
	
	}
	
	var person = {
		name:"张三",
		age:18;
		sayHello:function(){ 
			alert("hello");
		};
	};
	
	function Person(){
		name:"张三",
		age:18;
		sayHello:function(){
			alert("hello");
		};
	}
	
	var p = new Person();
	p.sayHello(); 
	
JavaScript中的重载
	在JavaScript中本身没有重载,如果有相同函数名的方法,则会调用最后一个
	
		如果要实现函数重载的效果就要用到arguments来完成类似于重载的效果
		
	function add(){
		if(arguments.length == 2){
			return arguments[0] + arguments[1];
		}else if(arguments.length == 3){
			return arguments[0] + arguments[1] + arguments[2];
		}
	}
	
JavaScript中的继承:
	prototype原型,他可以扩充对象(但仅限于函数对象)
	
	function Person(){
		this.name = "天意";
		this.hasAGoogDad = function(){
			alert("aljd;a");
		}
	}
	1,一次扩充一个属性
	var p = new Person();
	Person.prototype.age = 18;   // 在对象上扩充属性
	Person.prototype.sayHello = function(){};
	alert(p.age);
	对象的定义可以在扩充之前;
	
	2,一次扩充多个属性和方法
	Person.prototype = {
		age:18;
		sayHello:function{
			
		}
	}
	对象的定义必须在扩充之后
	
	1,利用原型指向对象的引用实现继承效果
		function A(){name:"a"}
		
		function B(){name:"b"}
		
		A.prototype = new B();
		
		var a = new A();
		alert(a.name);
	2,通过原型指向原型实现继承
	
	
BOM:浏览器对象模型
	